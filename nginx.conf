# Config based on api-gateway's nginx.conf
# Based on: https://raw.githubusercontent.com/cloudfoundry/nginx-buildpack/v1.0.1/fixtures/mainline/nginx.conf
worker_processes auto;

# see https://github.com/cloudfoundry/nginx-buildpack/blob/master/fixtures/mainline/nginx.conf#L2
daemon off;

error_log stderr warn;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}

http {
    map_hash_max_size 64;
    map_hash_bucket_size 64;
    include nginx.conf.d/*.conf;
    charset utf-8;
    # EA-2236: Disable access logs
    access_log off;
    default_type application/octet-stream;
    include mime.types;
    sendfile on;

    tcp_nodelay on;
    tcp_nopush on;
    keepalive_timeout 30;
    port_in_redirect off; # Ensure that redirects don't include the internal container PORT - 8080

    map $http_accept $format {
      "text/html|application/xhtml\+xml"                      "html";
      "application/rdf\+xml|rdf/xml|application/xml|text/xml" "rdf";
      "application/json"                                      "json";
      "application/ld\+json"                                  "jsonld";
      "text/turtle|application/turtle|application/x-turtle"   "ttl";
      "text/n3|text/rdf\+n3|application/n3"                   "n3";
      "application/n-triples|application/ntriples|text/nt"    "nt";
    }

    # makes configuring record-api a lot easier
    map $http_accept $include_apikey {
      "text/html|application/xhtml\+xml"  0;
      default                             1;
    }
    server {
        listen {{port}};
        root public;

        set $document_root "/usr/local/apache2/htdocs/data.europeana.eu";

        # different redirect URLs based on environment, read from manifest file (env-nginx & rewrite-nginx-conf)
        set $annotation_api {{env "ANNOTATION_API_HOST"}};
        set $entity_api {{env "$ENTITY_API_HOST"}};
        set $fulltext_api {{env "$FULLTEXT_API_HOST"}};
        set $presentation_api {{env "$PRESENTATION_API_HOST"}};
        set $record_api {{env "$RECORD_API_HOST"}};
        set $set_api {{env "$SET_API_HOST"}};
        set $entity_portal {{env "$ENTITY_PORTAL_HOST"}};
        set $record_portal {{env "$RECORD_PORTAL_HOST"}};
        set $set_portal {{env "$SET_PORTAL_HOST"}};


        # CORS
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Credentials" "true";
        add_header "Access-Control-Allow-Methods" "POST, GET, OPTIONS, DELETE, PUT, PATCH, HEAD";
        add_header "Access-Control-Max-Age" "600";
        add_header "Access-Control-Expose-Headers" "Location";
        add_header "Access-Control-Allow-Headers" "x-requested-with, Content-Type, origin, authorization, accept, client-security-token";

        # Add a rewrite to respond with a 200 SUCCESS on every OPTIONS request.
        RewriteCond %{REQUEST_METHOD} OPTIONS
        if ($request_method = 'OPTIONS') {
          return 200;
        }

        ########################################
        # Negotiation for Record API           #
        ########################################
        # avoid duplicating the rules          #
        rewrite /(aggregation/provider|proxy/provider|aggregation/europeana|proxy/europeana)/(.*) /item/$2 ;
        location = /item/ {
          # no Apikey
          if ($include_apikey = 0){
            rewrite /item/(.*) /$record_portal$1 redirect;
          }
          # yes Apikey, should work for all formats
          if ($include_apikey = 1){
            rewrite /item/(.*) /$url_record_api$1.$format?wskey=%{env:api_key} redirect;
          }
        }

        ########################################
        # Negotiation for OpenSKOS             #
        ########################################
        location ~ /concept/(loc|soundgenres) {
          return 301 https://$host$request_uri.xml last;
        }

        ########################################
        # Annotations                          #
        ########################################
        location ~ ^/annotation/(.*) {
          rewrite ^/annotation/(.+?)/(.+?)/(.+?)$ /$presentation_api$1/$2/anno/$3 redirect;
          rewrite ^/annotation/(.*) /$annotation_api$1 redirect;
        }

        ########################################
        # Entities                             #
        ########################################
        location ~ /(agent|place|concept|timespan|organization)/(.*) {
          # no Apikey, thank you
          if ($include_apikey = 0){
            rewrite /agent/base/(.*) /$entity_portal/person/$1 redirect;
            rewrite /concept/base/(.*) /$entity_portal/topic/$1 redirect;
            rewrite /timespan/(.*) /$entity_portal/time/$1 redirect;
          }

          # yes, I'll have a double Apikey, please
          if ($include_apikey = 1){
            rewrite /(organization)/(.*) /$entity_api$1/base/$2?wskey=%{env:entity_api_key} redirect;
            rewrite /(agent|place|concept|timespan)/(.*) /$entity_api$1/$2?wskey=%{env:entity_api_key} redirect;
          }
        }

        ########################################
        # Sets                                 #
        ########################################
        location ~ ^/set/(.*) {
          # Mais non! Quel impertinence!
          if ($include_apikey = 0){
            rewrite /set/(.*) /$url_set_portal$1 redirect;
          }

          # mais oui, j'aime des cl√©s d'Api gratuit avec mon croque monsieur chaque matin
          if ($include_apikey = 1){
            rewrite /set/(.*) /$url_set_api$1.$format?wskey=%{env:api_key} redirect;
            rewrite /set/(.*) /$url_set_api$1.$format?wskey=%{env:api_key} redirect;
          }
        }

        ########################################
        # Fulltext                             #
        ########################################
        location ~ ^/(fulltext|presentation)/(.*) {
          rewrite ^/fulltext/(.+?)/(.+?)/(.+?)$ /$fulltext_api$1/$2/$3 redirect;
        }

        ########################################
        # Negotiation for VoID and SPARQL      #
        ########################################

        # if the void is well-known
        location = /\.well-known/void {
          return 302 http://${data_$http_host;
        }

        location = /sparql/ {
          return 301 http://sparql.europeana.eu;
        }

        # try this if the Toitle is still void
        if ($format = "ttl"){
          return 303 http://europeana.ontotext.com/void.ttl;
        }

        # If the document is root, send it to linked open data
        if (!-f $document_root{request_filename}){
          return 303 https://pro.europeana.eu/page/linked-open-data;
        }


    } # server
} # http