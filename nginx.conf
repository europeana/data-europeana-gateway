worker_processes auto;
daemon off;

error_log stderr warn;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}


http {
    charset utf-8;
    # EA-2236: Disable access logs
    access_log off;
    default_type application/octet-stream;
    include mime.types;
    sendfile on;

    tcp_nodelay on;
    tcp_nopush on;
    keepalive_timeout 30;

    #     map_hash_max_size 64;
    map_hash_bucket_size 128;

    map $http_accept $format {
        "~*(text/html|application/xhtml\+xml)"                      "html";
        "~*(application/rdf\+xml|rdf/xml|application/xml|text/xml)" "rdf";
        "~*(application/json)"                                      "json";
        "~*(application/ld\+json)"                                  "jsonld";
        "~*(text/turtle|application/turtle|application/x-turtle)"   "ttl";
        "~*(text/n3|text/rdf\+n3|application/n3)"                   "n3";
        "~*(application/n-triples|application/ntriples|text/nt)"    "nt";
    }

    map $format $include_apikey {
        "~*(rdf|json|jsonld|ttl|n3|nt)" 1;
        default                         0;
    }

    server {
        listen 80 default_server;
        server_name data.test.eanadev.org;
        root /usr/share/nginx/html/;
        index index.html;

        # "upstream" servers do not use resolver settings by default (paid option),
        # so we proxy directly to the urls

        set $record_api api.europeana.eu/record;
        set $record_portal www.europeana.eu/item;
        set $annotation_api api.europeana.eu/annotation;
        set $annotation_portal www.europeana.eu;
        set $fulltext_api api.europeana.eu/fulltext;
        set $fulltext_portal www.europeana.eu/item;
        set $set_api api.europeana.eu/set;
        set $set_portal www.europeana.eu/set;
        set $entity_api api.europeana.eu/entity;
        set $entity_portal www.europeana.eu/collection;

        set $root_redirect pro.europeana.eu/page/linked-open-data;
        set $apikey api2demo;
        set $entity_apikey apidemo;

        set $linked_open_data "https://pro.europeana.eu/page/linked-open-data";

        resolver 172.21.0.10  8.8.8.8 8.8.4.4;

        add_header Link "<http://creativecommons.org/publicdomain/zero/1.0/>;rel=license";

        # include nginx.conf.d/*.conf;

        # Used by Kubernetes health checks
        location /nginx-health {
            default_type application/json;
            return 200 '{"status":"healthy"}';
        }


        #####################################
        # CORS                              #
        #####################################
        # Add a rewrite to respond with a 200 SUCCESS on every OPTIONS request.
        if ($request_method = 'OPTIONS') {
            return 200;
        }
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'POST, GET, OPTIONS, DELETE, PUT, PATCH, HEAD';
        add_header 'Access-Control-Max-Age' '600';
        add_header 'Access-Control-Expose-Headers' 'Location';
        add_header 'Access-Control-Allow-Headers' 'x-requested-with, Content-Type, origin, authorization, accept, client-security-token';


        ########################################
        # Negotiation for OpenSKOS             #
        ########################################

        # static files for Openskos requests are served in $WEBROOT/...
        location ~* ^/concept/[loc|soundgenres] {
            try_files $uri $uri.xml;
        }

        ########################################
        # Negotiation for .well-known/void     #
        ########################################

        # Processing the .well-known/void request required testing for two conditions, which is quite hard to do in
        # NGINX because has very limited support for IF's and does not allow any boolean logic at all.
        # The hack below is a way around that limitation: if the request is for "/" or "/.well-known/void", set
        # variable $voidtest to value 'A'. Then, if it is a Turtle request, add 'B' to the value of $voidtest:
        # 'A' => 'AB';  similarly, when it's a HTML request: 'A' => 'AC'.
        # Then there's only one variable to check, which is allowed (though, barely).

        set $voidtest  Z;

        if ($request_uri = /) {
            set $voidtest  A;
        }

        if ($request_uri = /.well-known/void) {
            set $voidtest  A;
        }

        if ($format = "ttl") {
            set $voidtest  "${voidtest}B";
        }

        # set the default (no Accept header)
        if ($format = "") {
            set $voidtest  "${voidtest}C";
        }

        if ($format = "html") {
            set $voidtest  "${voidtest}C";
        }

        if ($voidtest = AB){
            rewrite ^ /void.ttl last;
        }
        if ($voidtest = AC){
            return 303 $linked_open_data;
        }

        ########################################
        # Negotiation for Record API           #
        ########################################################################################
        # please note that rewrite needs http(s) or $scheme to not enter into an infinite loop #
        # also, adding "redirect" after a rewrite is not needed, it redirects by defailt       #
        ########################################################################################

        # step 1: capture all Record patterns and rewrite them in a uniform way as /path/$2 ($2 has Item ID)
        rewrite /(item|aggregation/provider|proxy/provider|aggregation/europeana|proxy/europeana)/(.*) /path/$2;

        # step 2: determine routing based on Accept header value. These are all mapped to the $format variable in
        # the HTTP block above to simplify processing. The Item ID captured in $2 above is reassigned to $itemid
        # using a named capture (?<itemid>.*) in the location directive where it needs to be done only once.
        location ~* ^\/path\/(?<itemid>.*) {
            # RDF
            if ($format = "rdf"){
                return 303 https://$record_api/$itemid.rdf?wskey=$apikey;
            }
            # JSON
            if ($format = "json"){
                return 303 https://$record_api/$itemid.json?wskey=$apikey;
            }
            # JSON-LD
            if ($format = "jsonld"){
                return 303 https://$record_api/$itemid.jsonld?wskey=$apikey;
            }
            # Turtle
            if ($format = "ttl"){
                return 303 https://$record_api/$itemid.ttl?wskey=$apikey;
            }
            # N3
            if ($format = "n3"){
                return 303 https://$record_api/$itemid.n3?wskey=$apikey;
            }
            # N-Triples
            if ($format = "nt"){
                return 303 https://$record_api/$itemid.nt?wskey=$apikey;
            }
            # DEFAULT
            return 303 https://$record_portal/$itemid;
        }

        #####################################
        # Entities                          #
        #####################################

        ### Organisation ###
        location ~* ^\/(organi[s|z]ation)\/(?<entityid>.*) {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$entity_api/organisation/$entityid?wskey=$entity_apikey;
            } # DEFAULT
            return 303 https://$entity_portal/organisation/$entityid;
        }

        ### Agent ###
        location ~* ^\/(agent)\/(?<entityid>.*) {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$entity_api/agent/$entityid?wskey=$entity_apikey;
            } # DEFAULT
            return 303 https://$entity_portal/person/$entityid;
        }

        ### Place ###
        location ~* ^\/(place)\/(?<entityid>.*) {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$entity_api/place/$entityid?wskey=$entity_apikey;
            } # DEFAULT
            return 303 https://$entity_portal/place/$entityid;
        }

        ### Concept ###
        location ~* ^\/(concept)\/(?<entityid>.*) {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$entity_api/concept/$entityid?wskey=$entity_apikey;
            } # DEFAULT
            return 303 https://$entity_portal/topic/$entityid;
        }

        ### Timespan ###
        location ~* ^\/(timespan)\/(?<entityid>.*) {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$entity_api/timespan/$entityid?wskey=$entity_apikey;
            } # DEFAULT
            return 303 https://$entity_portal/time/$entityid;
        }

        #####################################
        # Set                               #
        #####################################

        location ~* ^\/(set)\/(?<setid>.*) {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$set_api/$setid?wskey=$entity_apikey;
            } # DEFAULT
            return 303 https://$set_portal/$setid;
        }

        #####################################
        # Fulltext                          #
        #####################################

        location ~* ^\/(fulltext)\/(?<dsid>.*?)\/(?<lcid>.*?)\/(?<pgid>.*?)$ {
            # JSON JSON-LD RDF
            if ($include_apikey = 1){
                return 303 https://$fulltext_api/$dsid/$lcid/$pgid?wskey=$apikey;
            } # DEFAULT
            return 303 https://$fulltext_portal/$dsid/$lcid;
        }


        ########################################
        # Negotiation for SPARQL               #
        ########################################

        location /sparql/ {
            return 303 https://sparql.europeana.eu;
        }
    }
}