# Config based on api-gateway's nginx.conf
# Based on: https://raw.githubusercontent.com/cloudfoundry/nginx-buildpack/v1.0.1/fixtures/mainline/nginx.conf
worker_processes auto;

# see https://github.com/cloudfoundry/nginx-buildpack/blob/master/fixtures/mainline/nginx.conf#L2
daemon off;

error_log stderr warn;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}

http {
    include nginx.conf.d/*.conf;
    charset utf-8;
#     map_hash_max_size 64;
    map_hash_bucket_size 128;

    map $http_accept $format {
      "text/html|application/xhtml\+xml"                      "html";
      "application/rdf\+xml|rdf/xml|application/xml|text/xml" "rdf";
      "application/json"                                      "json";
      "application/ld\+json"                                  "jsonld";
      "text/turtle|application/turtle|application/x-turtle"   "ttl";
      "text/n3|text/rdf\+n3|application/n3"                   "n3";
      "application/n-triples|application/ntriples|text/nt"    "nt";
    }

    # makes configuring record-api a lot easier
    map $http_accept $include_apikey {
      "text/html|application/xhtml\+xml"  0;
      default                             1;
    }
    # EA-2236: Disable access logs
    access_log off;
    default_type application/octet-stream;
    include mime.types;
    sendfile on;

    tcp_nodelay on;
    tcp_nopush on;
    keepalive_timeout 30;
    port_in_redirect off; # Ensure that redirects don't include the internal container PORT - 8080


    server {
        # "upstream" servers do not use resolver settings by default (paid option),
        # so we proxy directly to the urls
        set $annotation_api ${ANNOTATION_API_HOST};
        set $entity_api ${ENTITY_API_HOST};
        set $fulltext_api ${FULLTEXT_API_HOST};
        set $presentation_api ${PRESENTATION_API_HOST};
        set $record_api ${RECORD_API_HOST};
        set $set_api ${SET_API_HOST};
        set $entity_portal ${ENTITY_PORTAL_HOST};
        set $record_portal ${RECORD_PORTAL_HOST};
        set $set_portal ${SET_PORTAL_HOST};
        set $entity_management ${ENTITY_MANAGEMENT_HOST};
        set $api_key ${API_KEY};
        set $entity_api_key ${ENTITY_API_KEY};
        set $data_host ${DATA_HOST};

        server_name {{env "DATA_HOST"}};
        listen 80;
        root /usr/share/nginx/html;
        index index.html;

        # HTTPS enforcement should be done within Kubernetes ingress


        # Used by Kubernetes health checks
        location /nginx-health {
            default_type application/json;
            return 200 '{"status":"healthy"}';
        }

        resolver ${RESOLVER_SETTINGS};

        add_header Link "<http://creativecommons.org/publicdomain/zero/1.0/>;rel=license";

        include nginx.conf.d/*.conf;

        # Add a rewrite to respond with a 200 SUCCESS on every OPTIONS request.
        if ($request_method = 'OPTIONS') {
          return 200;
        }

        ########################################
        # Negotiation for Record API           #
        ########################################
        rewrite /(aggregation/provider|proxy/provider|aggregation/europeana|proxy/europeana)/(.*) /item/$2 ;

        location /item/ {
          # no Apikey
          if ($include_apikey = 0){
            rewrite /item/(.*) {{env "RECORD_PORTAL_HOST"}}/$1 redirect;
          }
          # yes Apikey
          if ($include_apikey = 1){
            rewrite /item/(.*) {{env "RECORD_API_HOST"}}/$1.$format?wskey={{env "API_KEY"}} redirect;
          }
        }

        ########################################
        # Negotiation for OpenSKOS             #
        ########################################
        location ~ /concept/(loc|soundgenres) {
          return 301 https://$host$request_uri.xml;
        }

        ########################################
        # Annotations                          #
        ########################################
        location ~ ^/annotation/ {
          rewrite ^/annotation/(.+?)/(.+?)/(.+?)$ {{env "PRESENTATION_API_HOST"}}/$1/$2/anno/$3 redirect;
          rewrite ^/annotation/(.*) {{env "ANNOTATION_API_HOST"}}/$1 redirect;
        }

        ########################################
        # Entities                             #
        ########################################

        location ~ /(agent|place|concept|timespan|organization)/base/ {
            rewrite /(agent|place|concept|timespan|organization)/base/(.*) /$1/$2 permanent;
        }

        location ~ /(agent|place|concept|timespan|organization)/ {
          # no Apikey
          if ($include_apikey = 0){
            rewrite /agent/(.*) {{env "ENTITY_PORTAL_HOST"}}/person/$1 redirect;
            rewrite /concept/(.*) {{env "ENTITY_PORTAL_HOST"}}/topic/$1 redirect;
            rewrite /timespan/(.*) {{env "ENTITY_PORTAL_HOST"}}/time/$1 redirect;
            rewrite /organization/(.*) {{env "ENTITY_PORTAL_HOST"}}/organization/$1 redirect;
          }

          # with Apikey
          if ($include_apikey = 1){
            rewrite /(agent|place|concept|timespan|organization)/(.*) {{env "ENTITY_API_HOST"}}/$1/$2?wskey={{env "ENTITY_API_KEY"}} redirect;
          }
        }

        ########################################
        # Sets                                 #
        ########################################
        location /set/ {
          # Pas des clés d'Api
          if ($include_apikey = 0){
            rewrite /set/(.*) {{env "SET_PORTAL_HOST"}}/$1 redirect;
          }

          # Clé d'Api
          if ($include_apikey = 1){
            rewrite /set/(.*) {{env "SET_API_HOST"}}/$1.$format?wskey={{env "ENTITY_API_KEY"}} redirect;
            rewrite /set/(.*) {{env "SET_API_HOST"}}/$1.$format?wskey={{env "ENTITY_API_KEY"}} redirect;
          }
        }

        ########################################
        # Fulltext                             #
        ########################################
        location ~ ^/(fulltext|presentation)/ {
          rewrite ^/fulltext/(.+?)/(.+?)/(.+?)$ {{env "FULLTEXT_API_HOST"}}/$1/$2/$3 redirect;
        }

        ########################################
        # Negotiation for VoID and SPARQL      #
        ########################################

        # if the void is well-known
        location /.well-known/void/ {
          return 302 {{env "DATA_HOST"}};
        }

        location /sparql/ {
          return 301 http://sparql.europeana.eu;
        }

        # remaining default cases
        location / {
            # try this if the Toitle is still void
            if ($format = "ttl"){
              return 303 https://europeana.ontotext.com/void.ttl;
            }

            # otherwise, unless request is for a file, forward to pro
            try_files $uri https://pro.europeana.eu/page/linked-open-data$is_args$args;
        }


        # CORS
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Credentials" "true";
        add_header "Access-Control-Allow-Methods" "POST, GET, OPTIONS, DELETE, PUT, PATCH, HEAD";
        add_header "Access-Control-Max-Age" "600";
        add_header "Access-Control-Expose-Headers" "Location";
        add_header "Access-Control-Allow-Headers" "x-requested-with, Content-Type, origin, authorization, accept, client-security-token";

    } # server
} # http